{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","target","rel","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","useState","Math","random","toString","slice","id","touched","setTouched","hasError","trim","notValidData","includes","test","htmlFor","classNames","type","placeholder","event","preventDefault","onBlur","urlIsValid","NewMovie","onAdd","count","setCount","isDisabled","setIsDisabled","newMovie","setNewMovie","handleInputChange","onSubmit","prevState","disabled","App","moviesFromServer","setMovie","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7320c09e.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a\n          href={movie.imdbUrl}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (name: string, value: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nfunction validData(url: string) {\n  // eslint-disable-next-line max-len\n  const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n  return pattern.test(url);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value.trim();\n  const notValidData = ['imgUrl', 'imdbUrl'].includes(name) && touched\n    && !validData(value);\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => {\n            event.preventDefault();\n            onChange(name, event.target.value);\n          }}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {notValidData && (\n        <p className=\"help is-danger\">{`${label} is not valid`}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (newMovie: Movie) => void,\n};\n\n// eslint-disable-next-line max-len\nconst urlIsValid = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [isDisabled, setIsDisabled] = useState(true);\n  const [newMovie, setNewMovie] = useState({\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  });\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (newMovie.title.trim() !== ''\n      && newMovie.description.trim() !== ''\n      && newMovie.imgUrl.trim() !== ''\n      && newMovie.imdbUrl.trim() !== ''\n      && newMovie.imdbId.trim() !== ''\n    ) {\n      onAdd(newMovie);\n      setCount(prevState => prevState + 1);\n      setIsDisabled(true);\n      setNewMovie({\n        title: '',\n        description: '',\n        imgUrl: '',\n        imdbUrl: '',\n        imdbId: '',\n      });\n    }\n  };\n\n  const handleInputChange = (name: string, value: string): void => {\n    setNewMovie({\n      ...newMovie,\n      [name]: value,\n    });\n\n    const {\n      title,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    } = newMovie;\n\n    const allInputAreValid = title\n      && urlIsValid.test(imgUrl)\n      && urlIsValid.test(imdbUrl) && imdbId;\n\n    if (allInputAreValid) {\n      setIsDisabled(false);\n    }\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={newMovie.title}\n        onChange={handleInputChange}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={newMovie.description}\n        onChange={handleInputChange}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={newMovie.imgUrl}\n        onChange={handleInputChange}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={newMovie.imdbUrl}\n        onChange={handleInputChange}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={newMovie.imdbId}\n        onChange={handleInputChange}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isDisabled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovie] = useState(moviesFromServer);\n\n  const addNewMovie = (movie: Movie) => {\n    setMovie(prevMovies => ([\n      ...prevMovies,\n      movie,\n    ]));\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addNewMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}